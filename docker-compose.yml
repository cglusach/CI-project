# CI Project
# Proyecto para levantar un sistema de versionamiento e integracion continua para el
# Departamento de Ingenieria en informatica - USACH 2016
####################################################################################
#                                     redis                                        #
####################################################################################
# Base de datos NoSQL para almacenar key-value de gitlab. El servicio es un solo 
# contenedor. Mas informacion en: https://hub.docker.com/r/sameersbn/gitlab/
redis:
  image: sameersbn/redis:latest
  restart: always
  command:
    - --loglevel warning
  volumes:
  - /srv/docker/ci-project/redis:/var/lib/redis:Z # pq Z???

####################################################################################
#                                   postgresql                                     #
####################################################################################
# Base de datos SQL para almacenar informacion de gitlab. El servicio es un solo 
# contenedor. Mas informacion en: https://hub.docker.com/r/sameersbn/gitlab/
postgresql:
  # El esquema de la BD esta especificado en el Dockerfile para construir la imagen
  image: sameersbn/postgresql:9.6-2
  restart: always
  volumes:
    - /srv/docker/ci-project/postgresql:/var/lib/postgresql:Z # pq Z??
  environment:
    DB_USER: 
    DB_PASS: 
    DB_NAME: 
    DB_EXTENSION: 

####################################################################################
#                                    gitlab CE                                     #
####################################################################################
# El servicio se compone de dos contenedores 
# - gitlab-server: El servidor de gitlab 
# - gitlab-data: donde se almacena la informacion
# PROBLEMA CON LA IMAGEN DE GITLAB
# https://github.com/sameersbn/docker-gitlab/issues/904
gitlab: 
  image: sameersbn/gitlab:9.4.0-1
  links:
    - postgresql:postgresql
    - redis:redis
  labels:
    # rancher labels
    # soporte de rancher para, en este caso, volumes_from
    io.rancher.sidekicks: gitlab-data
    # io.rancher.container.dns: true
    # siempre pull una nueva imagen en cada deploy
    # io.rancher.container.pull_image: always
  restart: always
  #tty: true
  #stdin_open: true
  # environment:
    # gitlab_OMNIBUS_CONFIG: |
    # external_url "https://gitlab.example.com" 
    # Add any other gitlab.rb configuration here, each on its own line
  # Exponemos los puertos necesarios (de manera interna, no al hosts)
  # No es necesario dado que utilizamos un lb
  # ports:
  #  - "80:80" # http
  #  - "22" # https
  #  - "443" # ssl
  volumes_from:
    - gitlab-data # data storage en otro servicio (escritura y lectura)
  environment:
    DEBUG: 
    
    DB_ADAPTER:
    DB_HOST:
    DB_PORT:
    DB_USER:
    DB_PASS:
    DB_NAME:

    REDIS_HOST:
    REDIS_PORT:

    TZ:
    GITLAB_TIMEZONE:

    GITLAB_HTTPS:
    SSL_SELF_SIGNED:

    GITLAB_HOST:
    GITLAB_PORT:
    GITLAB_SSH_PORT:
    GITLAB_RELATIVE_URL_ROOT:
    # pwgen -Bsv1 64
    GITLAB_SECRETS_DB_KEY_BASE:
    GITLAB_SECRETS_SECRET_KEY_BASE:
    GITLAB_SECRETS_OTP_KEY_BASE:

    GITLAB_ROOT_PASSWORD:
    GITLAB_ROOT_EMAIL:

    GITLAB_NOTIFY_ON_BROKEN_BUILDS:
    GITLAB_NOTIFY_PUSHER:

    GITLAB_EMAIL:
    GITLAB_EMAIL_REPLY_TO:
    GITLAB_INCOMING_EMAIL_ADDRESS:

    GITLAB_BACKUP_SCHEDULE:
    GITLAB_BACKUP_TIME:
    
    # GITLAB projects features
    GITLAB_PROJECTS_ISSUES:
    GITLAB_PROJECTS_MERGE_REQUESTS:
    GITLAB_PROJECTS_WIKI:
    GITLAB_PROJECTS_SNIPPETS:
    GITLAB_PROJECTS_BUILDS:
    GITLAB_PROJECTS_CONTAINER_REGISTRY:

    # Concurrency
    UNICORN_WORKERS: 
    UNICORN_TIMEOUT: 
    SIDEKIQ_CONCURRENCY: 
    SIDEKIQ_SHUTDOWN_TIMEOUT: 

    # https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md
    SMTP_ENABLED:
    SMTP_DOMAIN:
    SMTP_HOST:
    SMTP_PORT:
    SMTP_USER:
    SMTP_PASS:
    SMTP_STARTTLS:
    SMTP_AUTHENTICATION:

    IMAP_ENABLED:
    IMAP_HOST:
    IMAP_PORT:
    IMAP_USER:
    IMAP_PASS:
    IMAP_SSL:
    IMAP_STARTTLS:

    # hay mas variables de ambiente para gitlab

# gitlab-data: donde se almacena la informacion del servidor de gitlab
gitlab-data:
  image: "library/busybox:latest"
  labels:
    # rancher labels
    # soporte de rancher para manter el contenedor sin correr mientras este
    # activo gitlab-server
    io.rancher.container.start_once: true
    # siempre pull una nueva imagen en cada deploy
    # io.rancher.container.pull_image: always
  entrypoint: 
    - "/bin/true" # el comando devuelve verdadero (succefully)
  volumes:
    - "/srv/docker/ci-project/gitlab/data:/home/git/data:Z"
    #- "/srv/docker/ci-project/gitlab/log:/home/git/gitlab/log:Z"
    #- "/etc/gitlab" # configuracion
    #- "/var/log/gitlab" # logs
    #- "/var/opt/gitlab" # data
  #tty: true
  #stdin_open: true

####################################################################################
#                                     jenkins                                      #
####################################################################################
# El servicio se compone de los siguientes componentes:
# - jenkins, (jenkins-master) servidor de jenkins
# - jenkins-slave, nodos de jenkins para la ejecucion los jobs de jenkins
jenkins:
  image: "techtraits/jenkins-master"
  labels:
    io.rancher.sidekicks: jenkins-data
  restart: "no" # No me queda muy claro por que no"
  #tty: true
  #stdin_open: true
  volumes_from:
    - jenkins-data
  privileged: true # corre en modo priviligiado
  # Montamos la direccion absoluta de docker en el host 
  #volumes:
  #  - /var/run/docker.sock:/var/run/docker.sock

# jenkins-data: donde se almacena la informacion del master de jenkins
jenkins-data:
  image: "techtraits/jenkins-master"
  labels:
    # rancher labels
    io.rancher.container.start_once: true
    # io.rancher.container.pull_image: always
  entrypoint: 
    - "/bin/true"
  volumes:
    - /srv/docker/ci-project/jenkins:/var/jenkins:Z # pq Z??
  #tty: true
  #stdin_open: true

####################################################################################
#                                    filebeat                                      #
####################################################################################
# para capturar los logs de los servicios
# - gitlab-data
#filebeat:
#  image: prima/filebeat:latest
#  volumes:
#    - "/srv/docker/ci-project/gitlab/log:/etc/log/gitlab:ro"
#    - "/srv/docker/ci-project/filebeat/filebeat.yml:/filebeat.yml"
#  labels:
#    io.rancher.scheduler.affinity:host_label: lb=true
#  command: ["filebeat", "-c", "/filebeat.yml", "-e"]

##  entrypoint: ["/metricbeat/metricbeat", "-system.hostfs=/hostfs"]
  
# jenkins-slave: https://github.com/rancher/jenkins-slave
# jenkins-slave:
#   image: "techtraits/jenkins-slave"
#   links:
#     - jenkins:jenkins
#   privileged: true
#   # volume privado del esclavo
#   volumes:
#     - /var/jenkins
#   #tty: true
#   #stdin_open: true
#   # variables de ambiente para acceder al master
#   environment:
#     JENKINS_USERNAME:
#     JENKINS_PASSWORD:
#     JENKINS_MASTER:
#     # cantidad de jobs simultaneos - nÂ° cores
#     SLAVE_EXECUTORS:

# load balancer
#jenkins-lb:
#  image: rancher/load-balancer-service
#  ports:
#    - "8080"
#  links:
#    - jenkins:jenkins
 #tty: true
 #stdin_open: true
  
####################################################################################
#                                  Load Balancer                                   #
####################################################################################
# En la version 1.4 cambia la manera de agregar lb, por lo que ahora todo esto queda
# comentado y se agregan por UI

# load-balancer:
#   image: rancher/load-balancer-service
#   ports:
#     - "80:80"
#   links:
#     - gitlab:gitlab
#     - jenkins:jenkins
#   labels:
#     # afinidad a un solo host (deploy del container en un [o varios] host particular)
#     # requiere crear un label lb=true
#     io.rancher.scheduler.affinity:host_label: lb=true
#     # L7 reglas de ruteo
#     io.rancher.loadbalancer.target.gitlab: gitlab.diinf.usach.cl:80=80
#     io.rancher.loadbalancer.target.jenkins: jenkins.diinf.usach.cl:80=8080
#     io.rancher.loadbalancer.target.ghost: pehuelche.diinf.usach.cl:80=80
#   #tty: true
#   #stdin_open: true