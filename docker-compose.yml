# CI Project
# Proyecto para levantar un sistema de versionamiento e integracion continua para el
# Departamento de Ingenieria en informatica - USACH 2016
####################################################################################
#                                     redis                                        #
####################################################################################
# Base de datos NoSQL para almacenar key-value de gitlab. El servicio es un solo 
# contenedor. Mas informacion en: https://hub.docker.com/r/sameersbn/gitlab/
redis:
  image: sameersbn/redis:latest
  restart: always
  command:
    - --loglevel warning
  volumes:
  - /srv/docker/gitlab/redis:/var/lib/redis:Z # pq Z???
####################################################################################
#                                   postgresql                                     #
####################################################################################
# Base de datos SQL para almacenar informacion de gitlab. El servicio es un solo 
# contenedor. Mas informacion en: https://hub.docker.com/r/sameersbn/gitlab/
postgresql:
  # El esquema de la BD esta especificado en el Dockerfile para construir la imagen
  image: sameersbn/postgresql:9.5
  restart: always
  volumes:
    - /srv/docker/gitlab/postgresql:/var/lib/postgresql:Z # pq Z??
  environment:
    DB_USER: 
    DB_PASS: 
    DB_NAME: 
    DB_EXTENSION: 
    #DB_USER: "gitlab"
    #DB_PASS: "password"
    #DB_NAME: "gitlabhq_production"
    #DB_EXTENSION: "pg_trgm"

####################################################################################
#                                    gitlab CE                                     #
####################################################################################
# El servicio se compone de dos contenedores 
# - gitlab-server: El servidor de gitlab 
# - gitlab-data: donde se almacena la informacion
gitlab: 
  image: "sameersbn/gitlab:8.10.5"
  links:
    - postgresql:postgresql
    - redis:redis
  labels:
    # rancher labels
    # soporte de rancher para, en este caso, volumes_from
    io.rancher.sidekicks: gitlab-data
    # siempre pull una nueva imagen en cada deploy
    # io.rancher.container.pull_image: always
  restart: always
  #tty: true
  #stdin_open: true
  # environment:
    # gitlab_OMNIBUS_CONFIG: |
    # external_url "https://gitlab.example.com" 
    # Add any other gitlab.rb configuration here, each on its own line
  # Exponemos los puertos necesarios (de manera interna, no al hosts)
  # No es necesario dado que utilizamos un lb
  # ports:
  #  - "80:80" # http
  #  - "22" # https
  #  - "443" # ssl
  volumes_from:
    - gitlab-data # data storage en otro servicio (escritura y lectura)
  environment:
    DEBUG: 
    
    DB_ADAPTER:
    DB_HOST:
    DB_PORT:
    DB_USER:
    DB_PASS:
    DB_NAME:

    REDIS_HOST:
    REDIS_PORT:

    TZ:
    GITLAB_TIMEZONE:

    GITLAB_HTTPS:
    SSL_SELF_SIGNED:

    GITLAB_HOST:
    GITLAB_PORT:
    GITLAB_SSH_PORT:
    GITLAB_RELATIVE_URL_ROOT:
    GITLAB_SECRETS_DB_KEY_BASE:

    GITLAB_ROOT_PASSWORD:
    GITLAB_ROOT_EMAIL:

    GITLAB_NOTIFY_ON_BROKEN_BUILDS:
    GITLAB_NOTIFY_PUSHER:

    GITLAB_EMAIL:
    GITLAB_EMAIL_REPLY_TO:
    GITLAB_INCOMING_EMAIL_ADDRESS:

    GITLAB_BACKUP_SCHEDULE:
    GITLAB_BACKUP_TIME:

    # https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md
    SMTP_ENABLED:
    SMTP_DOMAIN:
    SMTP_HOST:
    SMTP_PORT:
    SMTP_USER:
    SMTP_PASS:
    SMTP_STARTTLS:
    SMTP_AUTHENTICATION:

    IMAP_ENABLED:
    IMAP_HOST:
    IMAP_PORT:
    IMAP_USER:
    IMAP_PASS:
    IMAP_SSL:
    IMAP_STARTTLS:

    # DEBUG: false
    
    # DB_ADAPTER: "postgresql"
    # DB_HOST: "postgresql"
    # DB_PORT: 5432
    # DB_USER: "gitlab"
    # DB_PASS: "password"
    # DB_NAME: "gitlabhq_production"

    # REDIS_HOST: "redis"
    # REDIS_PORT: 6379

    # TZ: "America/Santiago"
    # GITLAB_TIMEZONE: "Santiago"

    # GITLAB_HTTPS: false
    # SSL_SELF_SIGNED: false

    # GITLAB_HOST: "localhost"
    # GITLAB_PORT: 80
    # GITLAB_SSH_PORT: 22
    # GITLAB_RELATIVE_URL_ROOT:
    # GITLAB_SECRETS_DB_KEY_BASE: "3NhK4jWRMth9vjtVdbxMbJs9rfXbzTPXX7WFxHTkkKNRkzNWHRd3rqwvCKzhHk7c" # pwgen -Bsv1 64

    # GITLAB_ROOT_PASSWORD: "Comando1"
    # GITLAB_ROOT_EMAIL: "cristobal.acosta@usach.cl"

    # GITLAB_NOTIFY_ON_BROKEN_BUILDS: true
    # GITLAB_NOTIFY_PUSHER: false

    # GITLAB_EMAIL: "notifications@example.com"
    # GITLAB_EMAIL_REPLY_TO: "noreply@example.com"
    # GITLAB_INCOMING_EMAIL_ADDRESS: "reply@example.com"

    # GITLAB_BACKUP_SCHEDULE: "daily"
    # GITLAB_BACKUP_TIME: "01:00"

    # # https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md
    # SMTP_ENABLED: true
    # SMTP_DOMAIN: "www.example.com"
    # SMTP_HOST: "smtp.sendgrid.net"
    # SMTP_PORT: 587
    # SMTP_USER: "udesantiagox"
    # SMTP_PASS: "Comando1"
    # SMTP_STARTTLS: true # investigar mas, tengo la duda
    # SMTP_AUTHENTICATION: "login"

    # IMAP_ENABLED: false
    # IMAP_HOST: "imap.gmail.com"
    # IMAP_PORT: 993
    # IMAP_USER: "mailer@example.com"
    # IMAP_PASS: "password"
    # IMAP_SSL: true
    # IMAP_STARTTLS: false

    # hay mas variables de ambiente para gitlab

# gitlab-data: donde se almacena la informacion del servidor de gitlab
gitlab-data:
  image: "sameersbn/gitlab:8.10.5"
  labels:
    # rancher labels
    # soporte de rancher para manter el contenedor sin correr mientras este
    # activo gitlab-server
    io.rancher.container.start_once: true
    # siempre pull una nueva imagen en cada deploy
    # io.rancher.container.pull_image: always
  entrypoint: 
    - "/bin/true" # el comando devuelve verdadero (succefully)
  volumes:
    - "/srv/docker/gitlab/gitlab:/home/git/data:Z"
    #- "/etc/gitlab" # configuracion
    #- "/var/log/gitlab" # logs
    #- "/var/opt/gitlab" # data
  #tty: true
  #stdin_open: true

####################################################################################
#                                     jenkins                                      #
####################################################################################
# El servicio se compone de los siguientes componentes:
# - jenkins, (jenkins-master) servidor de jenkins
# - jenkins-slave, nodos de jenkins para la ejecucion los jobs de jenkins
jenkins:
  image: "rancher/jenkins-master"
  labels:
    io.rancher.sidekicks: jenkins-data
  restart: "no" # No me queda muy claro por que no"
  #tty: true
  #stdin_open: true
  volumes_from:
    - jenkins-data
  privileged: true # corre en modo priviligiado 

# jenkins-data: donde se almacena la informacion del master de jenkins
jenkins-data:
  image: "rancher/jenkins-master"
  labels:
    # rancher labels
    io.rancher.container.start_once: true
    # io.rancher.container.pull_image: always
  entrypoint: 
    - "/bin/true"
  volumes:
    - "/var/jenkins_home" # all data
  #tty: true
  #stdin_open: true

# jenkins-slave: https://github.com/rancher/jenkins-slave
jenkins-slave:
  image: "rancher/jenkins-slave"
  links:
    - jenkins:jenkins
  privileged: true
  # volume privado del esclavo
  volumes:
    - /var/jenkins
  #tty: true
  #stdin_open: true
  # variables de ambiente para acceder al master
  environment:
    JENKINS_USERNAME:
    JENKINS_PASSWORD:
    JENKINS_MASTER:
    # cantidad de jobs simultaneos - nÂ° cores
    SLAVE_EXECUTORS:
    #JENKINS_USERNAME: "jenkins"
    #JENKINS_PASSWORD: "jenkins"
    #JENKINS_MASTER: "http://jenkins:8080"
    #SLAVE_EXECUTORS: 2

# load balancer
#jenkins-lb:
#  image: rancher/load-balancer-service
#  ports:
#    - "8080"
#  links:
#    - jenkins:jenkins
 #tty: true
 #stdin_open: true
  
####################################################################################
#                                  Load Balancer                                   #
####################################################################################
load-balancer:
  image: rancher/load-balancer-service
  ports:
    - "80:80"
  links:
    - gitlab:gitlab
    - jenkins:jenkins
  labels:
    # afinidad a un solo host (deploy del container en un [o varios] host particular)
    # requiere crear un label lb=true
    io.rancher.scheduler.affinity:host_label: lb=true
    # L7 reglas de ruteo
    io.rancher.loadbalancer.target.gitlab: web.mooc.informatica.usach.cl:80=80
    io.rancher.loadbalancer.target.jenkins: chat.mooc.informatica.usach.cl:80=8080
  #tty: true
  #stdin_open: true